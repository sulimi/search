{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","logoType","url","simplifyUrl","replace","split","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","toLowerCase"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMA,SAAS,GAAGC,CAAC,CAAC,WAAD,CAAnB;AACA,IAAMC,OAAO,GAAGF,SAAS,CAACG,IAAV,CAAe,SAAf,CAAhB;AACA,IAAMC,CAAC,GAAGC,YAAY,CAACC,OAAb,CAAqB,GAArB,CAAV,EAAoC;;AACpC,IAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWL,CAAX,CAAhB,EAA8B;AAC9B;;AACA,IAAMM,OAAO,GAAGH,OAAO,IAAI,CAAC;AACxB;AAACI,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CADuB,EAEvB;AAACF,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CAFuB,EAGvB;AAACF,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CAHuB,EAIvB;AAACF,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CAJuB,EAKvB;AAACF,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CALuB,EAMvB;AAACF,EAAAA,IAAI,EAAE,GAAP;AAAYC,EAAAA,QAAQ,EAAE,MAAtB;AAA8BC,EAAAA,GAAG,EAAE;AAAnC,CANuB,CAQvB;AARuB,CAA3B;;AAWA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACD,GAAD,EAAS;AACzB;AACA,SAAOA,GAAG,CAACE,OAAJ,CAAY,UAAZ,EAAwB,EAAxB,EACFA,OADE,CACM,SADN,EACiB,EADjB,EAEFA,OAFE,CAEM,MAFN,EAEc,EAFd,EAGFA,OAHE,CAGM,MAHN,EAGc,EAHd,EAGiB;AAHjB,GAIJC,KAJI,CAIE,GAJF,EAIO,CAJP,CAAP;AAMH,CARD;;AASA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjB;AACAjB,EAAAA,SAAS,CAACG,IAAV,CAAe,eAAf,EAAgCe,MAAhC;AACAR,EAAAA,OAAO,CAACS,OAAR,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAC7B;AACA,QAAMC,GAAG,GAAGrB,CAAC,2CACMmB,IAAI,CAACP,GADX,mGAGmBO,IAAI,CAACT,IAHxB,sTAUeG,WAAW,CAACM,IAAI,CAACP,GAAN,CAV1B,oDAAD,CAYJU,YAZI,CAYSrB,OAZT,CAAZ;AAaAoB,IAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAgB,YAAI;AAAC;AACjBC,MAAAA,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACP,GAAjB;AACH,KAFD;AAGAS,IAAAA,GAAG,CAACE,EAAJ,CAAO,OAAP,EAAgB,QAAhB,EAA0B,UAACG,CAAD,EAAO;AAC7BA,MAAAA,CAAC,CAACC,eAAF,GAD6B,CACT;;AACpBlB,MAAAA,OAAO,CAACmB,MAAR,CAAeR,KAAf,EAAsB,CAAtB;AACAJ,MAAAA,MAAM,GAHuB,CAGpB;AACZ,KAJD;AAMH,GAxBD;AAyBH,CA5BD,EA6BA;;;AACAA,MAAM;AACNhB,CAAC,CAAC,YAAD,CAAD,CACKuB,EADL,CACQ,OADR,EACiB,YAAM;AACf;AACA,MAAIX,GAAG,GAAGY,MAAM,CAACK,MAAP,CAAc,OAAd,CAAV;AACA,MAAI,CAACjB,GAAL,EAAS;;AACT,MAAIA,GAAG,CAACkB,OAAJ,CAAY,MAAZ,MAAwB,CAA5B,EAA+B;AAC3BlB,IAAAA,GAAG,GAAG,aAAaA,GAAnB;AACH,GANc,CAQf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAH,EAAAA,OAAO,CAACsB,IAAR,CAAa;AAACrB,IAAAA,IAAI,EAAEG,WAAW,CAACD,GAAD,CAAX,CAAiB,CAAjB,EAAoBoB,WAApB,EAAP;AAA0CrB,IAAAA,QAAQ,EAAE,MAApD;AAA4DC,IAAAA,GAAG,EAAEA;AAAjE,GAAb;AACAI,EAAAA,MAAM;AACT,CAxBL,GAyBA;AACA;AACA;;AACAQ,MAAM,CAACS,cAAP,GAAwB,YAAM;AAC1B;AACA;AACA,MAAMC,MAAM,GAAG3B,IAAI,CAAC4B,SAAL,CAAe1B,OAAf,CAAf;AACAL,EAAAA,YAAY,CAACgC,OAAb,CAAqB,GAArB,EAA0BF,MAA1B,EAJ0B,CAIQ;AAErC,CAND,EAQA;;;AACAlC,CAAC,CAACqC,QAAD,CAAD,CAAYd,EAAZ,CAAe,UAAf,EAA2B,UAACG,CAAD,EAAK;AAC5B;AAD4B,MAErBY,GAFqB,GAEdZ,CAFc,CAErBY,GAFqB,EAEZ;AAEhB;AACA;AACA;AACA;AACA;;AAEA7B,EAAAA,OAAO,CAACS,OAAR,CAAgB,UAACC,IAAD,EAAOC,KAAP,EAAgB;AAC5B,QAAID,IAAI,CAACT,IAAL,CAAU6B,WAAV,OAA0BD,GAA9B,EAAkC;AAC9Bd,MAAAA,MAAM,CAACC,IAAP,CAAYN,IAAI,CAACP,GAAjB;AACH;AACJ,GAJD;AAKH,CAfD","file":"main.7de81cda.js","sourceRoot":"..\\src","sourcesContent":["//怎让当前页面内容存活：用数据结构把它数据存起来，刷新页面时再把数据结构里的数据渲染到页面\n//当前用到的数据结构：数组里面存哈希表\n//[\n// {logo:'A', url:'https://www.acfun.cn'},\n// {logo:'./images/bilibili.jpg', url:'https://www.bilibili.com/'}\n// ]\nconst $siteList = $('.siteList');\nconst $lastLi = $siteList.find('li.last');\nconst x = localStorage.getItem('x');//读取本地存储\nconst xObject = JSON.parse(x);//变成对象\n//用parcel会默认在代码外面加一曾作用域，所以这个不是全局变量，不用当心全局污染\nconst hashMap = xObject || [//第一次的时候xObject是空的，所以这里要设置一个初始值\n    {logo: 'G', logoType: 'text', url: 'https://github.com/'},\n    {logo: 'J', logoType: 'text', url: 'https://juejin.im/'},\n    {logo: 'V', logoType: 'text', url: 'https://vuejs.org/'},\n    {logo: 'R', logoType: 'text', url: 'https://reactjs.org/'},\n    {logo: 'I', logoType: 'text', url: 'https://www.iconfont.cn/'},\n    {logo: 'B', logoType: 'text', url: 'https://www.bilibili.com/'},\n\n    //新增网站：\n];\n\nconst simplifyUrl = (url) => {\n    //显示函数，把协议省略不显示\n    return url.replace('https://', '')\n        .replace('http://', '')\n        .replace('www.', '')\n        .replace(/\\/.*/, '')//如果输入的网址包含查询字符串\n      .split('.')[0]\n\n}\nconst render = () => {\n    //渲染添加了成员的新哈希表，要去掉之前的存在的已经渲染的\n    $siteList.find('li:not(.last)').remove();\n    hashMap.forEach((node, index) => {\n        //用js写html\n        const $li = $(`<li>\n<!--            <a href=\"${node.url}\">-->\n                <div class=\"site\">\n                    <div class=\"logo\">${node.logo}</div>\n                    <div class=\"close\">\n                        <svg class=\"icon\">\n                            <use xlink:href=\"#icon-baseline-close-px\"></use>\n                        </svg>\n                    </div>\n                </div>\n                <div class=\"link\">${simplifyUrl(node.url)}</div>\n<!--            </a>-->\n        </li>`).insertBefore($lastLi);\n        $li.on('click', ()=>{//不用a标签，用js实现代替跳转到新页面，还是要阻止冒泡\n            window.open(node.url);\n        })\n        $li.on('click', '.close', (e) => {\n            e.stopPropagation();//阻止冒泡点击还是会触发a标签跳转，不用a标签\n            hashMap.splice(index, 1);\n            render();//删除之后记得重新渲染\n        })\n\n    })\n}\n//声名了要render一次\nrender();\n$('.addButton')\n    .on('click', () => {\n        //问用户填啥的全局方法\n        let url = window.prompt('请输入地址');\n        if (!url)return\n        if (url.indexOf('http') !== 0) {\n            url = 'https://' + url;\n        }\n\n        // console.log(url);\n        // console.log($siteList);\n        // const $li = $(`\n        //       <li>\n        //     <a href=\"${url}\">\n        //         <div class=\"site\">\n        //             <div class=\"logo\">${url[8]}</div>\n        //             <div class=\"link\">${url}</div>\n        //         </div>\n        //     </a>\n        // </li>\n        // `).insertBefore($lastLi);\n        //新增网址\n        hashMap.push({logo: simplifyUrl(url)[0].toUpperCase(), logoType: 'text', url: url});\n        render();\n    })\n//点击链接其他网站之前要把当前的哈希存一下，确保退回当前页的时候你添加的网址还存在\n//监听离开当前页面之前触发的事件：\n//存到localStorage,storage只能存储字符串\nwindow.onbeforeunload = () => {\n    // console.log(\"页面要关闭了\");\n    //对象变成字符串\n    const string = JSON.stringify(hashMap);\n    localStorage.setItem('x', string);//key, value   意思是在本地的存储里面设置一个x，x的值就是string\n\n}\n\n//监听键盘事件\n$(document).on('keypress', (e)=>{\n    // const key=e.key;\n    const {key} = e;//e对象中有key同名\n\n    // for (let i=0; i<hashMap.length; i++){\n    //     if (hashMap[i].logo.toLowerCase()===key){\n    //         window.open(hashMap[i].url);\n    //     }\n    // }\n\n    hashMap.forEach((node, index) =>{\n        if (node.logo.toLowerCase()===key){\n            window.open(node.url);\n        }\n    })\n})"]}