{"version":3,"sources":["main.js"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","logoType","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","push","toUpperCase","onbeforeunload","string","stringify","setItem","document","key","toLowerCase"],"mappings":"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","file":"main.71fed759.js","sourceRoot":"..\\src","sourcesContent":["//怎让当前页面内容存活：用数据结构把它数据存起来，刷新页面时再把数据结构里的数据渲染到页面\r\n//当前用到的数据结构：数组里面存哈希表\r\n//[\r\n// {logo:'A', url:'https://www.acfun.cn'},\r\n// {logo:'./images/bilibili.jpg', url:'https://www.bilibili.com/'}\r\n// ]\r\nconst $siteList = $('.siteList');\r\nconst $lastLi = $siteList.find('li.last');\r\nconst x = localStorage.getItem('x');//读取本地存储\r\nconst xObject = JSON.parse(x);//变成对象\r\n//用parcel会默认在代码外面加一曾作用域，所以这个不是全局变量，不用当心全局污染\r\nconst hashMap = xObject || [//第一次的时候xObject是空的，所以这里要设置一个初始值\r\n    {logo: 'A', logoType: 'text', url: 'https://www.acfun.cn'},\r\n    {logo: 'B', logoType: 'text', url: 'https://www.bilibili.com'},\r\n\r\n    //新增网站：\r\n];\r\n\r\nconst simplifyUrl = (url) => {\r\n    //显示函数，把协议省略不显示\r\n    return url.replace('https://', '')\r\n        .replace('http://', '')\r\n        .replace('www.', '')\r\n        .replace(/\\/.*/, '') //如果输入的网址包含查询字符串\r\n}\r\nconst render = () => {\r\n    //渲染添加了成员的新哈希表，要去掉之前的存在的已经渲染的\r\n    $siteList.find('li:not(.last)').remove();\r\n    hashMap.forEach((node, index) => {\r\n        //用js写html\r\n        const $li = $(`<li>\r\n<!--            <a href=\"${node.url}\">-->\r\n                <div class=\"site\">\r\n                    <div class=\"logo\">${node.logo}</div>\r\n                    <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n                    <div class=\"close\">\r\n                        <svg class=\"icon\">\r\n                            <use xlink:href=\"#icon-baseline-close-px\"></use>\r\n                        </svg>\r\n                    </div>\r\n                </div>\r\n<!--            </a>-->\r\n        </li>`).insertBefore($lastLi);\r\n        $li.on('click', ()=>{//不用a标签，用js实现代替跳转到新页面，还是要阻止冒泡\r\n            window.open(node.url);\r\n        })\r\n        $li.on('click', '.close', (e) => {\r\n            e.stopPropagation();//阻止冒泡点击还是会触发a标签跳转，不用a标签\r\n            hashMap.splice(index, 1);\r\n            render();//删除之后记得重新渲染\r\n        })\r\n\r\n    })\r\n}\r\n//声名了要render一次\r\nrender();\r\n$('.addButton')\r\n    .on('click', () => {\r\n        //问用户填啥的全局方法\r\n        let url = window.prompt('请问你要添加的网址是啥？');\r\n        if (url.indexOf('http') !== 0) {\r\n            url = 'https://' + url;\r\n        }\r\n        // console.log(url);\r\n        // console.log($siteList);\r\n        // const $li = $(`\r\n        //       <li>\r\n        //     <a href=\"${url}\">\r\n        //         <div class=\"site\">\r\n        //             <div class=\"logo\">${url[8]}</div>\r\n        //             <div class=\"link\">${url}</div>\r\n        //         </div>\r\n        //     </a>\r\n        // </li>\r\n        // `).insertBefore($lastLi);\r\n        //新增网址\r\n        hashMap.push({logo: simplifyUrl(url)[0].toUpperCase(), logoType: 'text', url: url});\r\n        render();\r\n    })\r\n//点击链接其他网站之前要把当前的哈希存一下，确保退回当前页的时候你添加的网址还存在\r\n//监听离开当前页面之前触发的事件：\r\n//存到localStorage,storage只能存储字符串\r\nwindow.onbeforeunload = () => {\r\n    // console.log(\"页面要关闭了\");\r\n    //对象变成字符串\r\n    const string = JSON.stringify(hashMap);\r\n    localStorage.setItem('x', string);//key, value   意思是在本地的存储里面设置一个x，x的值就是string\r\n\r\n}\r\n\r\n//监听键盘事件\r\n$(document).on('keypress', (e)=>{\r\n    // const key=e.key;\r\n    const {key} = e;//e对象中有key同名\r\n\r\n    // for (let i=0; i<hashMap.length; i++){\r\n    //     if (hashMap[i].logo.toLowerCase()===key){\r\n    //         window.open(hashMap[i].url);\r\n    //     }\r\n    // }\r\n\r\n    hashMap.forEach((node, index) =>{\r\n        if (node.logo.toLowerCase()===key){\r\n            window.open(node.url);\r\n        }\r\n    })\r\n})"]}